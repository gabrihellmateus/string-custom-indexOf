name: CI CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [manual-action-trigger]

jobs:
  build:
    name: Build
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # - name: Install Dependencies
      #   run: |
      #     yarn install --frozen-lockfile

      # - name: Run Lint
      #   if: success()
      #   run: yarn lint

      # - name: Run Unit Tests
      #   if: success()
      #   run: yarn test
      
      # - name: Run Build
      #   if: success()
      #   run: yarn build

      # - name: Upload Build Artifact
      #   if: success()
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: build.artifact
      #     path: build

  release:
    name: Release
    needs: build
    # if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Should Skip Release?
        run: | 
          echo "Last Commit Message X2: ${{ github.event.head_commit.message }}"
          bash ./scripts/check-commit-message.sh

      # - name: Install dependencies
      #   run: yarn install --frozen-lockfile
      
      # - name: Release
      #   run: yarn release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Create release.json
      #   run: |
      #     RELEASE_VERSION=$(bash ./scripts/get-json-value.sh version package.json)
      #     echo '{ "version": "'${RELEASE_VERSION}'" }' > .release.json

      # - name: Upload CNAME to Config Artifact
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: config.artifact
      #     path: CNAME
          
      # - name: Upload Release to Config Artifact
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: config.artifact
      #     path: .release.json

      # - name: Upload Scripts Artifact
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: scripts.artifact
      #     path: scripts

  deploy:
    name: Deploy to GH-Pages
    needs: release
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Remove everything!
        run: rm -rf ./*

      - name: Download Version Artifact
        uses: actions/download-artifact@v1
        with:
          name: scripts.artifact
          path: scripts
          
      - name: Get Current Version
        run: |
          VERSION=$(bash ./scripts/get-json-value.sh version .release.json)
          echo "CURRENT_VERSION=${VERSION}" >> $GITHUB_ENV
          
      - name: Download Config Artifact
        uses: actions/download-artifact@v1
        with:
          name: config.artifact
          path: .

      - name: Get Release Version
        run: |
          RELEASE_VERSION=$(bash ./scripts/get-json-value.sh version .release.json)
          SHOULD_UPDATE=false
          [[ ${{ env.CURRENT_VERSION }} != ${RELEASE_VERSION} ]]; SHOULD_UPDATE=true || SHOULD_UPDATE=false
          echo "SHOULD_UPDATE=${SHOULD_UPDATE}" >> $GITHUB_ENV
          echo "VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Log Variables
        run: |
          echo "CURRENT_VERSION: ${{ env.CURRENT_VERSION }}"
          echo "VERSION: ${{ env.VERSION }}"
          echo "SHOULD_UPDATE: ${{ env.SHOULD_UPDATE }}"

      - name: Download Build Artifact
        if: env.SHOULD_UPDATE == 'true'
        uses: actions/download-artifact@v1
        with:
          name: build.artifact
          path: .

      - name: Set Git User
        if: env.SHOULD_UPDATE == 'true'
        run: |
          git config --local user.email "semantic-release-bot@martynus.net"
          git config --local user.name "semantic-release-bot"

      - name: Git Commit and Push
        if: env.SHOULD_UPDATE == 'true'
        run: |
          git add .
          git commit -m "chore(release): v${{ env.VERSION }} [skip-ci]"
          git push -f
      